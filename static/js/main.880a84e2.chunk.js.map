{"version":3,"sources":["components/Logo/brain.png","components/Navigation/Navigation.js","components/FaceRecognition/FaceRecognition.js","components/Signin/Signin.js","components/Register/Register.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","_ref","onRouteChange","isSignedIn","react_default","a","createElement","style","display","justifyContent","onClick","className","FaceRecognition","imageUrl","box","id","alt","src","width","height","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","person","probability","Signin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","Content-Type","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","htmlFor","type","name","onChange","React","Component","Register","onNameChange","Logo","tilt_default","options","max","brain","ImageLinkForm","onInputChange","onButtonSubmit","Rank","entries","concat","initalState","input","route","joined","App","data","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","concepts","left_col","top_row","right_col","bottom_row","Math","floor","displayFaceBox","count","assign","catch","console","log","err","_this$state","particles_default","params","particles","number","density","enable","value_area","components_Navigation_Navigation","components_Logo_Logo","components_Rank_Rank","components_ImageLinkForm_ImageLinkForm","components_FaceRecognition_FaceRecognition","components_Signin_Signin","components_Register_Register","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.880a84e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.8b80ab2a.png\";","import React from 'react'\r\n\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n        if (isSignedIn) {\r\n            return (\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                {/* bellow is: () => onRouteChange('signout') and is because we want to execute function only when we click */}\r\n                {/* It will render only the modules based on the route in App.js */}\r\n                <p onClick={() => onRouteChange('signout')} className='f3 link dim black underline pa3 pointer '> Sign Out </p>\r\n            </nav>\r\n            )\r\n        } else {\r\n            return (\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signin')} className='f3 link dim black underline pa3 pointer '> Sign In </p>\r\n                <p onClick={() => onRouteChange('register')} className='f3 link dim black underline pa3 pointer '> Register </p>\r\n            </nav>\r\n            )\r\n        }\r\n}\r\n\r\n\r\nexport default Navigation;","import React from 'react'\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n    return (\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n                <img id='inputimage' alt='' src={imageUrl} width='500px' height='auto' />\r\n                <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n                <p>This person is: {box.person} </p>\r\n                <p>Probability: {box.probability}</p>\r\n            </div>\r\n            <div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default FaceRecognition;","import React from \"react\";\r\n\r\nclass Signin extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      signInEmail: '',\r\n      signInPassword: ''\r\n    }\r\n  }\r\n\r\n  //Bellow are the code to get the values and store in the PROPS above\r\n  onEmailChange = (event) => {\r\n    this.setState({signInEmail: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({signInPassword: event.target.value})\r\n  }\r\n\r\n\r\n  //We are sending a POST request to the server with email, pw & name\r\n  //We receive back a response with the user. This is defined in the API (NodeJS)\r\n  //With the response back, we execute loadUser with the user details. And change route \r\n  onSubmitSignIn = () => {\r\n    fetch('https://smart-brain-renato.herokuapp.com/signin', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        email: this.state.signInEmail,\r\n        password: this.state.signInPassword\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(user => {\r\n      if(user.id){\r\n        this.props.loadUser(user);\r\n        this.props.onRouteChange('home');\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Sign in\"\r\n              />\r\n            </div>\r\n            <div className=\"lh-copy mt3\">\r\n              <p  onClick={() => onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React from \"react\";\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      name: ''\r\n    }\r\n  }\r\n\r\n  //Bellow are the code to get the values and store in the PROPS above\r\n  onNameChange = (event) => {\r\n    this.setState({ name: event.target.value})\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({ email: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({ password: event.target.value})\r\n  }\r\n\r\n  //We are sending a POST request to the server with email, pw & name\r\n  //We receive back a response with the user. This is defined in the API (NodeJS)\r\n  //With the response back, we execute loadUser with the user details. \r\n  onSubmitSignIn = () => {\r\n    fetch('https://smart-brain-renato.herokuapp.com/register', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        name: this.state.name\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(user => {\r\n      if (user.id) {\r\n        this.props.loadUser(user)\r\n        this.props.onRouteChange('home');\r\n      }\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  onChange={this.onNameChange}\r\n                />\r\n              </div>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Register\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\nimport brain from './brain.png'\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"ma4 mt0\">\r\n        <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 25 }} style={{ height: 150, width: 150 }} >\r\n            <div className=\"Tilt-inner\"> <img alt='logo' src={brain} /> </div>\r\n        </Tilt>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport \"./ImageLinkForm.css\";\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n  return (\r\n    <div>\r\n      <p className='ImageLinkForm-p'>\r\n          {'This Magic Brain will detect faces in your pictures. Give it a try'}\r\n      </p>\r\n      <div className='center'>\r\n          <div className='form center pa4 br shadow-5'>\r\n            <input className='f4 pa2 w-70 center' type='text' onChange={onInputChange} />\r\n            <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple' onClick={onButtonSubmit}>Detect</button>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageLinkForm;\r\n","import React from \"react\";\r\n\r\nconst Rank = ({name, entries}) => {\r\n  return (\r\n    <div>\r\n        <div className='white f3'>\r\n            {`${name} , your current entry count is...`}\r\n        </div>\r\n        <div className='white f1'>\r\n            {entries}\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rank;\r\n","import React, { Component } from \"react\";\nimport Particles from \"react-particles-js\"; //This is related with the animated background\nimport Navigation from \"./components/Navigation/Navigation\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Signin from \"./components/Signin/Signin\";\nimport Register from \"./components/Register/Register\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport \"./App.css\";\n\n\nconst initalState = {\n    input: \"\",\n    imageUrl: \"\",\n    box: {},\n    route: \"signin\",\n    isSignedIn: false,\n    user: {\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      entries: 0,\n      joined: \"\"\n  }\n}\n\n//Bellow are the STATE that will change with the code\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initalState\n  }\n\n  //This is a function, from where we retrieve in Register & Signin the user details\n  //...as a response back from our API (NodeJS) \n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n\n  //calculateFaceLocation() is to get the data about face location\n  //And we do the calculations to get the location for the face <div>\n  calculateFaceLocation = data => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    //Bellow 2 lines is to get the first famous person\n    const person = data.outputs[0].data.regions[0].data.concepts[0].name;\n    const probability = data.outputs[0].data.regions[0].data.concepts[0].value;\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n      person: person,\n      probability: `${Math.floor(probability * 100)} %`\n    };\n  };\n\n  //This is to store the cordinates of the FaceBox\n  displayFaceBox = box => {\n    this.setState({ box: box });\n  };\n\n  //This is to get the link\n  onInputChange = event => {\n    this.setState({ input: event.target.value });\n  };\n\n  /* WE NOW HIDE THE API ON THE BACK-END, WE SEND THE INFO TO BACK END */\n  /* AND WE RETRIEVE THAT INFORMATION BACK */\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input })\n      fetch(\"https://smart-brain-renato.herokuapp.com/imageurl\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          input: this.state.input\n        })\n      }).then(response => response.json())\n      //calculateFaceLocation() is to get the data about face location\n      //displayFaceBox() is to pass the returned values to state.box\n      //The values from state.box are useful to create the div in \"FaceRecgnition.js\"\n      //On the 'fetch' bellow we are calculating the number of entries\n      .then(response => {\n        if (response) {\n          fetch(\"https://smart-brain-renato.herokuapp.com/image\", {\n            method: \"put\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, { entries: count }))\n            })\n            .catch(console.log)\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      })\n      .catch(err => console.log(err));\n  };\n\n  //This is to handle the Routes if is SignedIn, or Out. However is on the server side that we will handle authentication.\n  onRouteChange = route => {\n    if (route === \"signout\") {\n      this.setState(initalState);\n    } else if (route === \"home\") {\n      this.setState({ isSignedIn: true });\n    }\n    this.setState({ route: route });\n  };\n\n  render() {\n    //Line bellow is to avoid that we write all the time \"this.state.isSignedIn\" for example\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n        <Particles\n          className=\"particles\"\n          params={{\n            particles: {\n              number: {\n                value: 60,\n                density: {\n                  enable: true,\n                  value_area: 800\n                }\n              }\n            }\n          }}\n        />\n        <Navigation\n          isSignedIn={isSignedIn}\n          onRouteChange={this.onRouteChange}\n        />\n\n        {/* The default route is signin, in state above, however if we click on signin \n        it will route us to 'home' and render the other Components after -> : <- */}\n        {route === \"home\" ? (\n          <div>\n            <Logo />\n            {/* We need to send the details bellow to RANK, so that can display \n            the name and the number of entries */}\n            <Rank\n              name={this.state.user.name}\n              entries={this.state.user.entries}\n            />\n\n            <ImageLinkForm\n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}\n            />\n\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n    \n          </div>\n        ) : route === \"signin\" ? (\n          <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n        ) : (\n          <Register\n            loadUser={this.loadUser}\n            onRouteChange={this.onRouteChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}